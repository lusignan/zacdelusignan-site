<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zac de Lusignan</title>
    <link>https://zacdelusignan.com/</link>
    <description>Recent content on Zac de Lusignan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://zacdelusignan.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Risk-adjusted Stock Return</title>
      <link>https://zacdelusignan.com/blog/2020-11-28-risk-adjusted-stock-return/</link>
      <pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zacdelusignan.com/blog/2020-11-28-risk-adjusted-stock-return/</guid>
      <description>Sharpe Ratio #Import libraries import pandas as pd import numpy as np import matplotlib.pyplot as plt #Read in data stock_data = pd.read_csv(&#39;https://raw.githubusercontent.com/lusignan/Sharpe-Ratio/main/stock_data.csv&#39;, parse_dates=[&#39;Date&#39;], index_col=&#39;Date&#39; ).dropna() benchmark_data = pd.read_csv(&#39;https://raw.githubusercontent.com/lusignan/Sharpe-Ratio/main/stock_data.csv&#39;, parse_dates=[&#39;Date&#39;], index_col=&#39;Date&#39; ).dropna() #Visualize stock data stock_data.plot(title=&#39;Stock Data&#39;, subplots=True, linewidth = 1.5) #Visualize S&amp;amp;P 500 data benchmark_data.plot(linewidth = 1.5) #Calculate daily stock returns stock_returns = stock_data.pct_change() #Plot daily returns stock_returns.plot(linewidth = 1.5) #Calculate daily S&amp;amp;P 500 returns sp_returns = benchmark_data[&#39;S&amp;amp;P 500&#39;].pct_change() #Plot the daily returns sp_returns.</description>
    </item>
    
    <item>
      <title>Predicting Car Accident Severity</title>
      <link>https://zacdelusignan.com/blog/2020-11-25-predicting-car-accident-severity/</link>
      <pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zacdelusignan.com/blog/2020-11-25-predicting-car-accident-severity/</guid>
      <description>Introduction For my capstone project as part of IBM&amp;rsquo;s Professional Certificate in Data Science I created a machine learning model that would predict the severity of a car accident based off of the lighting conditions, road conditions, and weather. This project has many practical uses. Being able to better predict how severe an accident is enables emergency services to more effectively triage in cases of multiple accidents. It could also optimize navigation apps ability to suggest alternate routes.</description>
    </item>
    
    <item>
      <title>Data Viz - Roman Emperors</title>
      <link>https://zacdelusignan.com/blog/roman-emperors/</link>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zacdelusignan.com/blog/roman-emperors/</guid>
      <description>Introduction From TidyTuesday&amp;rsquo;s Roman Emperors data set.
The chart shows us that elected emperors had longer reigns than those who rose to power by other means and the shortest reigns were by those who purchased the throne.
Code Below is the code used to create the visualization using R:
#Load libraries library(tidyverse) library(tidytuesdayR) library(ggthemes) #Custom color palette imperiumromanum = c(&amp;quot;#8E1F2F&amp;quot;,&amp;quot;#702963&amp;quot;,&amp;quot;#B85C28&amp;quot;,&amp;quot;#297036&amp;quot;, &amp;quot;#F0BC42&amp;quot;,&amp;quot;#26619C&amp;quot;,&amp;quot;#321C6F&amp;quot;,&amp;quot;#1F8E7E&amp;quot;) #Read in data emperors &amp;lt;- readr::read_csv(&amp;quot;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-08-13/emperors.csv&amp;quot;) #Convert the dates into numeric emperors$reign_start &amp;lt;- as.</description>
    </item>
    
    <item>
      <title>Nautical Twilight</title>
      <link>https://zacdelusignan.com/projects/item1/</link>
      <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zacdelusignan.com/projects/item1/</guid>
      <description>RStudio IDE and syntax theme https://github.com/lusignan/Nautical-Twilight
Compatability RStudio 1.3
Installation To install, run the following in your RStudio console:
rstudioapi::addTheme(&amp;quot;https://raw.githubusercontent.com/lusignan/Nautical-Twilight/main/nautical-twilight.rstheme&amp;quot;, apply = TRUE) </description>
    </item>
    
  </channel>
</rss>